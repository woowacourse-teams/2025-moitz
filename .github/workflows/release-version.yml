name: Release Version Management

# main 브랜치에 PR이 머지될 때 또는 수동 실행
on:
  pull_request:
    types: [closed]
    branches:
      - main

  # 수동으로 워크플로우를 실행할 수 있는 트리거 추가
  workflow_dispatch:
    inputs:
      version_type:
        description: '버전 업데이트 타입 선택 (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    # PR이 머지되었거나 수동 실행일 때 실행
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 전체 히스토리를 가져오기 위해 필요

      # git 사용자 설정
      - name: Setup Git User
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # 현재 버전 가져오기 (package.json에서)
      - name: Get current version
        id: current_version
        run: |
          VERSION=$(jq -r .version frontend/package.json)
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # PR 라벨에 따라 버전 업데이트
      - name: Update version based on PR labels
        id: version_bump
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 수동 실행시 입력받은 버전 타입 사용
            NEW_VERSION=$(npx semver ${{ steps.current_version.outputs.version }} -i ${{ github.event.inputs.version_type }})
          else
            # PR 라벨 확인
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'major') }}" == "true" ]]; then
              NEW_VERSION=$(npx semver ${{ steps.current_version.outputs.version }} -i major)
            elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'minor') }}" == "true" ]]; then
              NEW_VERSION=$(npx semver ${{ steps.current_version.outputs.version }} -i minor)
            else
              NEW_VERSION=$(npx semver ${{ steps.current_version.outputs.version }} -i patch)
            fi
          fi
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # package.json 버전 업데이트
      - name: Update package.json version
        run: |
          cd frontend
          npm version ${{ steps.version_bump.outputs.new_version }} --no-git-tag-version

      # Changelog 생성
      - name: Generate Changelog
        id: changelog
        uses: scottbrenner/generate-changelog-action@master
        env:
          REPO: ${{ github.repository }}

      # 변경사항 커밋
      - name: Commit changes
        run: |
          git add frontend/package.json
          git commit -m "chore: bump version to ${{ steps.version_bump.outputs.new_version }}"

      # 태그 생성 및 푸시
      - name: Create and push tag
        run: |
          git tag v${{ steps.version_bump.outputs.new_version }}
          git push origin v${{ steps.version_bump.outputs.new_version }}

      # GitHub Release 생성
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_bump.outputs.new_version }}
          release_name: Release v${{ steps.version_bump.outputs.new_version }}
          body: |
            ## What's Changed
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
